import streamlit as st
import pandas as pd
from datetime import datetime
import io
import sqlite3
import base64
import os
import zipfile
import hashlib

# Configura√ß√£o da p√°gina para melhor responsividade
st.set_page_config(
    page_title="Livro Caixa",
    page_icon="üìí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para melhor responsividade
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stDataFrame {
        font-size: 0.9rem;
    }
    @media (max-width: 768px) {
        .stDataFrame {
            font-size: 0.8rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# CONSTANTES PARA PERMISS√ïES
PERMISSOES = {
    'admin': 'Administrador',
    'editor': 'Editor', 
    'visualizador': 'Apenas Visualiza√ß√£o'
}

# Fun√ß√µes de autentica√ß√£o MODIFICADAS
def init_auth_db():
    """Inicializa a tabela de usu√°rios com permiss√µes"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            permissao TEXT NOT NULL DEFAULT 'visualizador',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Inserir usu√°rios padr√£o se n√£o existirem
    c.execute('SELECT COUNT(*) FROM usuarios WHERE username = ?', ('admin',))
    if c.fetchone()[0] == 0:
        # Senha padr√£o: "admin123"
        password_hash = hashlib.sha256('admin123'.encode()).hexdigest()
        c.execute('INSERT INTO usuarios (username, password_hash, permissao) VALUES (?, ?, ?)', 
                 ('admin', password_hash, 'admin'))
        
        # Usu√°rio visualizador padr√£o
        password_hash_viewer = hashlib.sha256('visual123'.encode()).hexdigest()
        c.execute('INSERT INTO usuarios (username, password_hash, permissao) VALUES (?, ?, ?)', 
                 ('visual', password_hash_viewer, 'visualizador'))
    
    conn.commit()
    conn.close()

def verify_password(password, password_hash):
    """Verifica se a senha est√° correta"""
    return hashlib.sha256(password.encode()).hexdigest() == password_hash

def login_user(username, password):
    """Faz login do usu√°rio"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute('SELECT password_hash, permissao FROM usuarios WHERE username = ?', (username,))
    result = c.fetchone()
    conn.close()
    
    if result and verify_password(password, result[0]):
        st.session_state.logged_in = True
        st.session_state.username = username
        st.session_state.permissao = result[1]  # Salvar a permiss√£o na sess√£o
        return True
    return False

def logout_user():
    """Faz logout do usu√°rio"""
    st.session_state.logged_in = False
    st.session_state.username = None
    st.session_state.permissao = None

def change_password(username, new_password):
    """Altera a senha do usu√°rio"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    password_hash = hashlib.sha256(new_password.encode()).hexdigest()
    c.execute('UPDATE usuarios SET password_hash = ? WHERE username = ?', 
             (password_hash, username))
    conn.commit()
    conn.close()

def create_user(username, password, permissao='visualizador'):
    """Cria um novo usu√°rio"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    try:
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        c.execute('INSERT INTO usuarios (username, password_hash, permissao) VALUES (?, ?, ?)', 
                 (username, password_hash, permissao))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False  # Usu√°rio j√° existe
    except Exception as e:
        return False
    finally:
        conn.close()

def get_all_users():
    """Busca todos os usu√°rios (apenas para admin)"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute('SELECT username, permissao, created_at FROM usuarios ORDER BY created_at')
    users = c.fetchall()
    conn.close()
    
    return users

def update_user_permission(username, permissao):
    """Atualiza a permiss√£o de um usu√°rio"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    try:
        c.execute('UPDATE usuarios SET permissao = ? WHERE username = ?', (permissao, username))
        conn.commit()
        return True, "Permiss√£o atualizada com sucesso!"
    except Exception as e:
        return False, f"Erro ao atualizar permiss√£o: {e}"
    finally:
        conn.close()

def delete_user(username):
    """Exclui um usu√°rio (apenas para admin)"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    try:
        # N√£o permitir excluir o pr√≥prio usu√°rio
        if username == st.session_state.username:
            return False, "N√£o √© poss√≠vel excluir seu pr√≥prio usu√°rio!"
        
        c.execute('DELETE FROM usuarios WHERE username = ?', (username,))
        conn.commit()
        return True, "Usu√°rio exclu√≠do com sucesso!"
    except Exception as e:
        return False, f"Erro ao excluir usu√°rio: {e}"
    finally:
        conn.close()

# Fun√ß√£o para verificar permiss√µes
def user_can_edit():
    """Verifica se o usu√°rio tem permiss√£o para editar"""
    return st.session_state.get('permissao') in ['admin', 'editor']

def user_is_admin():
    """Verifica se o usu√°rio √© administrador"""
    return st.session_state.get('permissao') == 'admin'

# ... (o restante das fun√ß√µes permanecem iguais: carregar_imagem_logo, init_db, get_lancamentos_mes, etc.)

# MODIFICA√á√ïES NA INTERFACE:

# Na p√°gina de Login - Modificar o formul√°rio de criar usu√°rio:
if not st.session_state.logged_in:
    # ... (c√≥digo do login existente)
    
    # Criar novo usu√°rio (apenas na p√°gina de login)
    with st.expander("üë• Criar Novo Usu√°rio"):
        with st.form("create_user_form"):
            st.subheader("Novo Usu√°rio")
            new_username = st.text_input("Novo Usu√°rio", placeholder="Digite o nome de usu√°rio")
            new_password = st.text_input("Nova Senha", type="password", placeholder="Digite a senha")
            confirm_password = st.text_input("Confirmar Senha", type="password", placeholder="Confirme a senha")
            
            # Apenas admin pode definir permiss√µes ao criar usu√°rio
            if st.session_state.get('logged_in') and user_is_admin():
                permissao = st.selectbox("Permiss√£o", options=list(PERMISSOES.keys()), 
                                       format_func=lambda x: PERMISSOES[x])
            else:
                permissao = 'visualizador'  # Padr√£o para novos usu√°rios
            
            create_submitted = st.form_submit_button("üë§ Criar Usu√°rio", use_container_width=True)
            
            if create_submitted:
                if new_username and new_password and confirm_password:
                    if new_password == confirm_password:
                        if create_user(new_username, new_password, permissao):
                            st.success(f"‚úÖ Usu√°rio '{new_username}' criado com sucesso!")
                        else:
                            st.error("‚ùå Erro ao criar usu√°rio. Nome de usu√°rio j√° existe.")
                    else:
                        st.error("‚ùå As senhas n√£o coincidem!")
                else:
                    st.warning("‚ö†Ô∏è Preencha todos os campos!")

# Na sidebar - Adicionar informa√ß√µes de permiss√£o:
with st.sidebar:
    # ... (c√≥digo da sidebar existente)
    
    # Informa√ß√µes do usu√°rio logado COM PERMISS√ÉO
    st.sidebar.markdown("---")
    st.sidebar.success(f"üë§ **Usu√°rio:** {st.session_state.username}")
    st.sidebar.info(f"üîê **Permiss√£o:** {PERMISSOES.get(st.session_state.permissao, 'Desconhecida')}")
    
    # ... (restante da sidebar)

# MODIFICA√á√ïES NAS P√ÅGINAS PARA IMPLEMENTAR RESTRI√á√ïES:

# P√°gina: Contas
elif pagina == "Contas":
    st.title("üìù Contas")
    
    # Buscar contas do banco
    contas = get_contas()
    
    # Apenas usu√°rios com permiss√£o de edi√ß√£o podem adicionar contas
    if user_can_edit():
        st.subheader("‚ûï Adicionar Nova Conta")
        
        nova_conta = st.text_input("**Nome da Nova Conta**", placeholder="Ex: Sal√°rios, Aluguel, Vendas...")
        
        if st.button("‚úÖ Adicionar Conta", use_container_width=True) and nova_conta:
            adicionar_conta(nova_conta)
            st.rerun()
    else:
        st.info("üëÄ **Modo de Visualiza√ß√£o** - Voc√™ pode apenas visualizar as contas existentes.")

# P√°gina: Lan√ßamentos - ADICIONAR VERIFICA√á√ïES DE PERMISS√ÉO
elif pagina == "Lan√ßamentos":
    st.title("üì• Lan√ßamentos do Caixa")
    
    meses = [
        "Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
    ]
    
    # Layout responsivo para sele√ß√£o de m√™s
    col1, col2 = st.columns([1, 3])
    
    with col1:
        mes_selecionado = st.selectbox("**Selecione o M√™s**", meses)
    
    with col2:
        st.info(f"üíº Trabalhando no m√™s de **{mes_selecionado}**")
        if not user_can_edit():
            st.warning("üëÄ **Modo de Visualiza√ß√£o** - Voc√™ pode apenas visualizar os lan√ßamentos.")
    
    # Buscar lan√ßamentos do banco
    df_mes = get_lancamentos_mes(mes_selecionado)
    
    # Apenas usu√°rios com permiss√£o de edi√ß√£o podem adicionar lan√ßamentos
    if user_can_edit():
        st.subheader("‚ûï Adicionar Lan√ßamento")
        
        # Layout responsivo para o formul√°rio
        with st.form("form_lancamento", clear_on_submit=True):
            col3, col4, col5 = st.columns([2, 2, 1])
            
            with col3:
                data = st.date_input("**Data**", datetime.now().date())
                historico = st.text_input("**Hist√≥rico**", placeholder="Descri√ß√£o do lan√ßamento...")
            
            with col4:
                complemento = st.text_input("**Complemento**", placeholder="Informa√ß√µes adicionais...")
                tipo_movimento = st.selectbox("**Tipo de Movimento**", ["Entrada", "Sa√≠da"])
            
            with col5:
                if tipo_movimento == "Entrada":
                    entrada = st.number_input("**Valor (R$)**", min_value=0.0, step=0.01, format="%.2f")
                    saida = 0.0
                else:
                    saida = st.number_input("**Valor (R$)**", min_value=0.0, step=0.01, format="%.2f")
                    entrada = 0.0
            
            submitted = st.form_submit_button("üíæ Salvar Lan√ßamento", use_container_width=True)
            
            if submitted and historico:
                # ... (c√≥digo existente para salvar lan√ßamento)
    else:
        st.info("üí° Para adicionar ou editar lan√ßamentos, solicite permiss√£o de edi√ß√£o ao administrador.")
    
    # Exibir lan√ßamentos do m√™s (todos os usu√°rios podem visualizar)
    st.subheader(f"üìã Lan√ßamentos - {mes_selecionado}")
    
    if not df_mes.empty:
        # ... (c√≥digo existente para exibir lan√ßamentos)
        
        # Apenas usu√°rios com permiss√£o de edi√ß√£o podem gerenciar lan√ßamentos
        if user_can_edit():
            # Se√ß√£o de Edi√ß√£o de Lan√ßamentos
            st.subheader("‚úèÔ∏è Gerenciar Lan√ßamentos")
            
            # ... (c√≥digo existente para editar/excluir lan√ßamentos)
            
            # Bot√£o para limpar lan√ßamentos do m√™s (apenas editores)
            if st.button(f"üóëÔ∏è Limpar TODOS os Lan√ßamentos de {mes_selecionado}", use_container_width=True, type="secondary"):
                if st.checkbox("‚úÖ Confirmar exclus√£o de TODOS os lan√ßamentos"):
                    limpar_lancamentos_mes(mes_selecionado)
                    st.rerun()
        else:
            st.info("üîí A edi√ß√£o de lan√ßamentos est√° dispon√≠vel apenas para usu√°rios com permiss√£o de edi√ß√£o.")

# Na p√°gina de Gerenciar Usu√°rios (sidebar) - APENAS ADMIN
if st.session_state.permissao == 'admin':
    with st.sidebar.expander("üë• Gerenciar Usu√°rios"):
        st.subheader("Usu√°rios do Sistema")
        
        # Listar usu√°rios existentes
        users = get_all_users()
        if users:
            st.write("**Usu√°rios cadastrados:**")
            for i, (username, permissao, created_at) in enumerate(users, 1):
                st.write(f"{i}. **{username}** - {PERMISSOES.get(permissao, 'Desconhecida')} - Criado em: {created_at[:10]}")
            
            st.markdown("---")
            
            # Editar permiss√µes de usu√°rio
            st.subheader("Editar Permiss√µes")
            user_to_edit = st.selectbox(
                "Selecione o usu√°rio para editar:",
                [user[0] for user in users if user[0] != 'admin']  # N√£o permitir editar admin
            )
            
            if user_to_edit:
                # Buscar permiss√£o atual do usu√°rio
                permissao_atual = next((user[1] for user in users if user[0] == user_to_edit), 'visualizador')
                
                nova_permissao = st.selectbox(
                    "Nova permiss√£o:",
                    options=list(PERMISSOES.keys()),
                    index=list(PERMISSOES.keys()).index(permissao_atual),
                    format_func=lambda x: PERMISSOES[x]
                )
                
                if st.button("üíæ Atualizar Permiss√£o", use_container_width=True):
                    if nova_permissao != permissao_atual:
                        success, message = update_user_permission(user_to_edit, nova_permissao)
                        if success:
                            st.success(message)
                            st.rerun()
                        else:
                            st.error(message)
            
            st.markdown("---")
            
            # Excluir usu√°rio
            st.subheader("Excluir Usu√°rio")
            user_to_delete = st.selectbox(
                "Selecione o usu√°rio para excluir:",
                [user[0] for user in users if user[0] != st.session_state.username]
            )
            
            if user_to_delete:
                if st.button("üóëÔ∏è Excluir Usu√°rio", use_container_width=True):
                    if st.checkbox("‚úÖ Confirmar exclus√£o do usu√°rio"):
                        success, message = delete_user(user_to_delete)
                        if success:
                            st.success(message)
                            st.rerun()
                        else:
                            st.error(message)
        else:
            st.info("Nenhum usu√°rio cadastrado.")

# Na p√°gina de Ajuda - Adicionar informa√ß√µes sobre permiss√µes
if pagina == "Ajuda":
    # ... (c√≥digo existente)
    
    st.subheader("üîê Sistema de Permiss√µes")
    
    col_perm1, col_perm2 = st.columns(2)
    
    with col_perm1:
        st.markdown("""
        **üìä N√≠veis de Permiss√£o:**
        
        - **üëë Administrador**: Acesso completo a todas as funcionalidades
        - **‚úèÔ∏è Editor**: Pode adicionar, editar e excluir lan√ßamentos e contas
        - **üëÄ Visualizador**: Apenas visualiza√ß√£o de dados e relat√≥rios
        
        **üîí Recursos por Permiss√£o:**
        """)
    
    with col_perm2:
        st.markdown("""
        **Visualizador pode:**
        - Ver contas existentes
        - Visualizar lan√ßamentos
        - Ver relat√≥rios e gr√°ficos
        - Exportar dados
        - Alterar pr√≥pria senha
        
        **Editor pode (al√©m do acima):**
        - Adicionar/editar/excluir contas
        - Adicionar/editar/excluir lan√ßamentos
        - Limpar lan√ßamentos do m√™s
        
        **Admin pode (al√©m de tudo):**
        - Gerenciar usu√°rios
        - Alterar permiss√µes
        - Excluir usu√°rios
        """)

# Inicializar bancos de dados
init_db()
init_auth_db()  # AGORA COM SISTEMA DE PERMISS√ïES

# ... (o restante do c√≥digo permanece igual)
