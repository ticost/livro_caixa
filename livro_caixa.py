import streamlit as st
import pandas as pd
from datetime import datetime
import io
import sqlite3
import base64
import os
import zipfile
import hashlib

# Configura√ß√£o da p√°gina para melhor responsividade
st.set_page_config(
    page_title="Livro Caixa",
    page_icon="üìí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para melhor responsividade
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stDataFrame {
        font-size: 0.9rem;
    }
    @media (max-width: 768px) {
        .stDataFrame {
            font-size: 0.8rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√µes de autentica√ß√£o
def init_auth_db():
    """Inicializa a tabela de usu√°rios"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Inserir usu√°rio padr√£o se n√£o existir
    c.execute('SELECT COUNT(*) FROM usuarios WHERE username = ?', ('admin',))
    if c.fetchone()[0] == 0:
        # Senha padr√£o: "admin123"
        password_hash = hashlib.sha256('admin123'.encode()).hexdigest()
        c.execute('INSERT INTO usuarios (username, password_hash) VALUES (?, ?)', 
                 ('admin', password_hash))
    
    conn.commit()
    conn.close()

def verify_password(password, password_hash):
    """Verifica se a senha est√° correta"""
    return hashlib.sha256(password.encode()).hexdigest() == password_hash

def login_user(username, password):
    """Faz login do usu√°rio"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute('SELECT password_hash FROM usuarios WHERE username = ?', (username,))
    result = c.fetchone()
    conn.close()
    
    if result and verify_password(password, result[0]):
        st.session_state.logged_in = True
        st.session_state.username = username
        return True
    return False

def logout_user():
    """Faz logout do usu√°rio"""
    st.session_state.logged_in = False
    st.session_state.username = None

def change_password(username, new_password):
    """Altera a senha do usu√°rio"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    password_hash = hashlib.sha256(new_password.encode()).hexdigest()
    c.execute('UPDATE usuarios SET password_hash = ? WHERE username = ?', 
             (password_hash, username))
    conn.commit()
    conn.close()

def create_user(username, password):
    """Cria um novo usu√°rio"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    try:
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        c.execute('INSERT INTO usuarios (username, password_hash) VALUES (?, ?)', 
                 (username, password_hash))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False  # Usu√°rio j√° existe
    except Exception as e:
        return False
    finally:
        conn.close()

def get_all_users():
    """Busca todos os usu√°rios (apenas para admin)"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute('SELECT username, created_at FROM usuarios ORDER BY created_at')
    users = c.fetchall()
    conn.close()
    
    return users

def delete_user(username):
    """Exclui um usu√°rio (apenas para admin)"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    try:
        # N√£o permitir excluir o pr√≥prio usu√°rio
        if username == st.session_state.username:
            return False, "N√£o √© poss√≠vel excluir seu pr√≥prio usu√°rio!"
        
        c.execute('DELETE FROM usuarios WHERE username = ?', (username,))
        conn.commit()
        return True, "Usu√°rio exclu√≠do com sucesso!"
    except Exception as e:
        return False, f"Erro ao excluir usu√°rio: {e}"
    finally:
        conn.close()

# Fun√ß√£o para carregar e exibir a imagem do logo
def carregar_imagem_logo(caminho_imagem="Logo_Loja.png"):
    """Carrega e exibe a imagem do logo na sidebar"""
    try:
        # Verifica se o arquivo existe
        if os.path.exists(caminho_imagem):
            # L√™ a imagem e converte para base64
            with open(caminho_imagem, "rb") as img_file:
                img_base64 = base64.b64encode(img_file.read()).decode()
            
            # Exibe a imagem na sidebar
            st.sidebar.markdown(
                f"""
                <div style="text-align: center; padding: 10px; margin-bottom: 20px;">
                    <img src="data:image/png;base64,{img_base64}" style="max-width: 100%; height: auto; border-radius: 10px;">
                </div>
                """,
                unsafe_allow_html=True
            )
            return True
        else:
            # Se a imagem n√£o existe, mostra o texto como fallback
            st.sidebar.markdown(
                """
                <div style="text-align: center; padding: 10px; background: linear-gradient(135deg, #1f77b4, #ff7f0e); 
                            border-radius: 10px; margin-bottom: 20px; color: white;">
                    <h2 style="margin-bottom: 5px; font-weight: bold; font-size: 1.2rem;">CONSTITUCIONALISTAS</h2>
                    <h3 style="margin-top: 0; font-weight: bold; font-size: 1rem;">929</h3>
                </div>
                """,
                unsafe_allow_html=True
            )
            return False
    except Exception as e:
        st.sidebar.error(f"Erro ao carregar logo: {str(e)}")
        return False

# Fun√ß√µes para o banco de dados
def init_db():
    """Inicializa o banco de dados SQLite"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    # Tabela para lan√ßamentos
    c.execute('''
        CREATE TABLE IF NOT EXISTS lancamentos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            mes TEXT NOT NULL,
            data DATE NOT NULL,
            historico TEXT NOT NULL,
            complemento TEXT,
            entrada REAL DEFAULT 0,
            saida REAL DEFAULT 0,
            saldo REAL DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Tabela SIMPLIFICADA para contas (sem separa√ß√£o Receitas/Despesas)
    c.execute('''
        CREATE TABLE IF NOT EXISTS contas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Inserir contas padr√£o se a tabela estiver vazia
    c.execute('SELECT COUNT(*) FROM contas')
    if c.fetchone()[0] == 0:
        contas_padrao = [
            'Sal√°rios',
            'Aluguel',
            'Energia El√©trica',
            '√Ågua',
            'Telefone',
            'Internet',
            'Material de Expediente',
            'Transporte',
            'Alimenta√ß√£o',
            'Manuten√ß√£o',
            'Vendas',
            'Servi√ßos Prestados',
            'Consultoria',
            'Outras Receitas',
            'Outras Despesas'
        ]
        for conta in contas_padrao:
            c.execute('INSERT OR IGNORE INTO contas (nome) VALUES (?)', (conta,))
    
    conn.commit()
    conn.close()

def get_lancamentos_mes(mes):
    """Busca lan√ßamentos de um m√™s espec√≠fico"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    try:
        df = pd.read_sql(f"SELECT * FROM lancamentos WHERE mes = '{mes}' ORDER BY data, id", conn)
        # Renomear colunas para mai√∫sculas para compatibilidade
        df.columns = [col.upper() for col in df.columns]
    except Exception as e:
        st.error(f"Erro ao buscar lan√ßamentos: {e}")
        df = pd.DataFrame(columns=['ID', 'MES', 'DATA', 'HISTORICO', 'COMPLEMENTO', 'ENTRADA', 'SAIDA', 'SALDO', 'CREATED_AT'])
    finally:
        conn.close()
    return df

def salvar_lancamento(mes, data, historico, complemento, entrada, saida, saldo):
    """Salva um novo lan√ßamento no banco"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute('''
            INSERT INTO lancamentos (mes, data, historico, complemento, entrada, saida, saldo)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (mes, data, historico, complemento, entrada, saida, saldo))
        conn.commit()
        st.success("‚úÖ Lan√ßamento adicionado com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro ao salvar lan√ßamento: {e}")
        conn.rollback()
    finally:
        conn.close()

def atualizar_lancamento(lancamento_id, mes, data, historico, complemento, entrada, saida):
    """Atualiza um lan√ßamento existente no banco"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        # Buscar todos os lan√ßamentos do m√™s para recalcular saldos
        c.execute('SELECT * FROM lancamentos WHERE mes = ? ORDER BY data, id', (mes,))
        lancamentos = c.fetchall()
        
        # Encontrar o √≠ndice do lan√ßamento sendo editado
        index_editado = None
        for i, lanc in enumerate(lancamentos):
            if lanc[0] == lancamento_id:
                index_editado = i
                break
        
        if index_editado is not None:
            # Atualizar o lan√ßamento espec√≠fico
            c.execute('''
                UPDATE lancamentos 
                SET data = ?, historico = ?, complemento = ?, entrada = ?, saida = ?
                WHERE id = ?
            ''', (data, historico, complemento, entrada, saida, lancamento_id))
            
            # Recalcular todos os saldos a partir do lan√ßamento editado
            for i in range(index_editado, len(lancamentos)):
                if i == index_editado:
                    # Para o lan√ßamento editado, usar saldo anterior
                    if i == 0:
                        saldo = entrada - saida
                    else:
                        saldo_anterior = lancamentos[i-1][7]  # SALDO do lan√ßamento anterior
                        saldo = saldo_anterior + entrada - saida
                else:
                    # Para lan√ßamentos seguintes, recalcular baseado no anterior
                    entrada_atual = lancamentos[i][5] if i != index_editado else entrada
                    saida_atual = lancamentos[i][6] if i != index_editado else saida
                    saldo_anterior = lancamentos[i-1][7] if i > 0 else 0
                    saldo = saldo_anterior + entrada_atual - saida_atual
                
                # Atualizar saldo no banco
                lanc_id = lancamentos[i][0] if i != index_editado else lancamento_id
                c.execute('UPDATE lancamentos SET saldo = ? WHERE id = ?', (saldo, lanc_id))
            
            conn.commit()
            return True
        else:
            st.error("‚ùå Lan√ßamento n√£o encontrado")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Erro ao atualizar lan√ßamento: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def excluir_lancamento(lancamento_id, mes):
    """Exclui um lan√ßamento espec√≠fico"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        # Buscar o lan√ßamento a ser exclu√≠do
        c.execute('SELECT * FROM lancamentos WHERE id = ?', (lancamento_id,))
        lancamento = c.fetchone()
        
        if lancamento:
            # Excluir o lan√ßamento
            c.execute('DELETE FROM lancamentos WHERE id = ?', (lancamento_id,))
            
            # Recalcular saldos dos lan√ßamentos seguintes
            c.execute('SELECT * FROM lancamentos WHERE mes = ? ORDER BY data, id', (mes,))
            lancamentos_restantes = c.fetchall()
            
            for i, lanc in enumerate(lancamentos_restantes):
                if i == 0:
                    saldo = lanc[5] - lanc[6]  # entrada - saida
                else:
                    saldo_anterior = lancamentos_restantes[i-1][7]
                    saldo = saldo_anterior + lanc[5] - lanc[6]
                
                c.execute('UPDATE lancamentos SET saldo = ? WHERE id = ?', (saldo, lanc[0]))
            
            conn.commit()
            return True
        else:
            st.error("‚ùå Lan√ßamento n√£o encontrado")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Erro ao excluir lan√ßamento: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def limpar_lancamentos_mes(mes):
    """Remove todos os lan√ßamentos de um m√™s"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute('DELETE FROM lancamentos WHERE mes = ?', (mes,))
        conn.commit()
        st.success(f"‚úÖ Lan√ßamentos de {mes} removidos com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro ao limpar lan√ßamentos: {e}")
        conn.rollback()
    finally:
        conn.close()

def get_contas():
    """Busca todas as contas"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    try:
        df = pd.read_sql("SELECT nome FROM contas ORDER BY nome", conn)
        contas = df['nome'].tolist()
    except Exception as e:
        st.error(f"Erro ao buscar contas: {e}")
        contas = []
    finally:
        conn.close()
    return contas

def adicionar_conta(nome_conta):
    """Adiciona uma nova conta"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute('INSERT OR IGNORE INTO contas (nome) VALUES (?)', (nome_conta,))
        conn.commit()
        st.success(f"‚úÖ Conta '{nome_conta}' adicionada com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro ao adicionar conta: {e}")
        conn.rollback()
    finally:
        conn.close()

# Fun√ß√£o para exportar dados em formato CSV
def exportar_para_csv():
    """Exporta dados para formato CSV que pode ser aberto no Excel"""
    try:
        # Criar um arquivo ZIP em mem√≥ria com m√∫ltiplos CSVs
        output = io.BytesIO()
        
        # Criar estrutura de dados para exporta√ß√£o
        dados_exportacao = {}
        
        # Informa√ß√µes do sistema
        dados_exportacao['00_Informacoes.csv'] = pd.DataFrame({
            'Sistema': ['Livro Caixa - CONSTITUCIONALISTAS-929'],
            'Exportado_em': [datetime.now().strftime('%d/%m/%Y %H:%M:%S')],
            'Desenvolvido_por': ['Silmar Tolotto']
        })
        
        # Contas
        contas = get_contas()
        dados_exportacao['01_Contas.csv'] = pd.DataFrame({'Conta': contas})
        
        # Lan√ßamentos por m√™s
        meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        
        for mes in meses:
            df_mes = get_lancamentos_mes(mes)
            if not df_mes.empty:
                # Selecionar e renomear colunas
                colunas_exportar = []
                mapeamento_colunas = {}
                
                if 'DATA' in df_mes.columns:
                    colunas_exportar.append('DATA')
                    mapeamento_colunas['DATA'] = 'Data'
                if 'HISTORICO' in df_mes.columns:
                    colunas_exportar.append('HISTORICO')
                    mapeamento_colunas['HISTORICO'] = 'Hist√≥rico'
                if 'COMPLEMENTO' in df_mes.columns:
                    colunas_exportar.append('COMPLEMENTO')
                    mapeamento_colunas['COMPLEMENTO'] = 'Complemento'
                if 'ENTRADA' in df_mes.columns:
                    colunas_exportar.append('ENTRADA')
                    mapeamento_colunas['ENTRADA'] = 'Entrada_R$'
                if 'SAIDA' in df_mes.columns:
                    colunas_exportar.append('SAIDA')
                    mapeamento_colunas['SAIDA'] = 'Sa√≠da_R$'
                if 'SALDO' in df_mes.columns:
                    colunas_exportar.append('SALDO')
                    mapeamento_colunas['SALDO'] = 'Saldo_R$'
                
                if colunas_exportar:
                    df_export = df_mes[colunas_exportar].copy()
                    df_export.columns = [mapeamento_colunas[col] for col in colunas_exportar]
                    
                    # Formatar datas
                    if 'Data' in df_export.columns:
                        df_export['Data'] = pd.to_datetime(df_export['Data']).dt.strftime('%d/%m/%Y')
                    
                    dados_exportacao[f'02_{mes}.csv'] = df_export
        
        # Criar um arquivo ZIP com todos os CSVs
        with zipfile.ZipFile(output, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for nome_arquivo, df in dados_exportacao.items():
                # CORRE√á√ÉO: usar ponto e v√≠rgula como delimitador
                csv_data = df.to_csv(index=False, sep=';', encoding='utf-8-sig')
                zipf.writestr(nome_arquivo, csv_data)
        
        output.seek(0)
        return output
        
    except Exception as e:
        st.error(f"‚ùå Erro ao exportar dados: {e}")
        return None

# Fun√ß√£o para download CSV individual por m√™s
def download_csv_mes(mes):
    """Gera CSV individual para um m√™s espec√≠fico"""
    df_mes = get_lancamentos_mes(mes)
    if not df_mes.empty:
        # Selecionar colunas para exporta√ß√£o
        colunas_exportar = ['DATA', 'HISTORICO', 'COMPLEMENTO', 'ENTRADA', 'SAIDA', 'SALDO']
        colunas_existentes = [col for col in colunas_exportar if col in df_mes.columns]
        
        if colunas_existentes:
            df_export = df_mes[colunas_existentes].copy()
            
            # Renomear colunas
            mapeamento_colunas = {
                'DATA': 'Data',
                'HISTORICO': 'Hist√≥rico',
                'COMPLEMENTO': 'Complemento',
                'ENTRADA': 'Entrada_R$',
                'SAIDA': 'Sa√≠da_R$',
                'SALDO': 'Saldo_R$'
            }
            df_export.columns = [mapeamento_colunas[col] for col in colunas_existentes]
            
            # Formatar datas
            if 'Data' in df_export.columns:
                df_export['Data'] = pd.to_datetime(df_export['Data']).dt.strftime('%d/%m/%Y')
            
            # Converter para CSV com ponto e v√≠rgula
            csv_data = df_export.to_csv(index=False, sep=';', encoding='utf-8-sig')
            return csv_data
    return None

# Inicializar bancos de dados
init_db()
init_auth_db()

# Verificar se o usu√°rio est√° logado
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.username = None

# P√°gina de Login
if not st.session_state.logged_in:
    st.title("üîê Login - Livro Caixa")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Usando markdown para exibir o emoji como texto
        st.markdown("""
        <div style="text-align: center; font-size: 80px; padding: 20px;">
            üîí
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        with st.form("login_form"):
            st.subheader("Acesso Restrito")
            username = st.text_input("Usu√°rio", placeholder="Digite seu usu√°rio")
            password = st.text_input("Senha", type="password", placeholder="Digite sua senha")
            
            submitted = st.form_submit_button("üö™ Entrar", use_container_width=True)
            
            if submitted:
                if username and password:
                    if login_user(username, password):
                        st.success(f"‚úÖ Bem-vindo, {username}!")
                        st.rerun()
                    else:
                        st.error("‚ùå Usu√°rio ou senha incorretos!")
                else:
                    st.warning("‚ö†Ô∏è Preencha todos os campos!")
        
        st.markdown("---")
        
        # Criar novo usu√°rio (apenas na p√°gina de login)
        with st.expander("üë• Criar Novo Usu√°rio"):
            with st.form("create_user_form"):
                st.subheader("Novo Usu√°rio")
                new_username = st.text_input("Novo Usu√°rio", placeholder="Digite o nome de usu√°rio")
                new_password = st.text_input("Nova Senha", type="password", placeholder="Digite a senha")
                confirm_password = st.text_input("Confirmar Senha", type="password", placeholder="Confirme a senha")
                
                create_submitted = st.form_submit_button("üë§ Criar Usu√°rio", use_container_width=True)
                
                if create_submitted:
                    if new_username and new_password and confirm_password:
                        if new_password == confirm_password:
                            if create_user(new_username, new_password):
                                st.success(f"‚úÖ Usu√°rio '{new_username}' criado com sucesso!")
                            else:
                                st.error("‚ùå Erro ao criar usu√°rio. Nome de usu√°rio j√° existe.")
                        else:
                            st.error("‚ùå As senhas n√£o coincidem!")
                    else:
                        st.warning("‚ö†Ô∏è Preencha todos os campos!")
        
        #st.info("""
        #**Credenciais padr√£o:**
        #- **Usu√°rio:** admin
        #- **Senha:** admin123
        #""")
    
    st.stop()

# Aplica√ß√£o principal (apenas para usu√°rios logados)
# Sidebar com logo e informa√ß√µes do usu√°rio
with st.sidebar:
    # Tenta carregar a imagem do logo
    logo_carregado = carregar_imagem_logo("Logo_Loja.png")
    
    if not logo_carregado:
        st.sidebar.info("üí° Para usar seu logo, coloque o arquivo 'Logo_Loja.png' na mesma pasta do aplicativo")
    
    st.title("üìí Livro Caixa")
    
    # Informa√ß√µes do usu√°rio logado
    st.sidebar.markdown("---")
    st.sidebar.success(f"üë§ **Usu√°rio:** {st.session_state.username}")
    
    # Bot√£o de logout
    if st.sidebar.button("üö™ Sair", use_container_width=True):
        logout_user()
        st.rerun()
    
    # Alterar senha
    with st.sidebar.expander("üîë Alterar Senha"):
        with st.form("change_password_form"):
            new_password = st.text_input("Nova Senha", type="password")
            confirm_password = st.text_input("Confirmar Senha", type="password")
            
            if st.form_submit_button("üíæ Alterar Senha"):
                if new_password and confirm_password:
                    if new_password == confirm_password:
                        change_password(st.session_state.username, new_password)
                        st.success("‚úÖ Senha alterada com sucesso!")
                    else:
                        st.error("‚ùå As senhas n√£o coincidem!")
                else:
                    st.warning("‚ö†Ô∏è Preencha todos os campos!")
    
    # Gerenciar usu√°rios (apenas para admin)
    if st.session_state.username == 'admin':
        with st.sidebar.expander("üë• Gerenciar Usu√°rios"):
            st.subheader("Usu√°rios do Sistema")
            
            # Listar usu√°rios existentes
            users = get_all_users()
            if users:
                st.write("**Usu√°rios cadastrados:**")
                for i, (username, created_at) in enumerate(users, 1):
                    st.write(f"{i}. **{username}** - Criado em: {created_at[:10]}")
                
                st.markdown("---")
                
                # Excluir usu√°rio
                st.subheader("Excluir Usu√°rio")
                user_to_delete = st.selectbox(
                    "Selecione o usu√°rio para excluir:",
                    [user[0] for user in users if user[0] != 'admin']
                )
                
                if user_to_delete:
                    if st.button("üóëÔ∏è Excluir Usu√°rio", use_container_width=True):
                        if st.checkbox("‚úÖ Confirmar exclus√£o do usu√°rio"):
                            success, message = delete_user(user_to_delete)
                            if success:
                                st.success(message)
                                st.rerun()
                            else:
                                st.error(message)
            else:
                st.info("Nenhum usu√°rio cadastrado.")
    
    st.markdown("---")
    
    pagina = st.radio(
        "**Navega√ß√£o:**",
        ["Ajuda", "Contas", "Lan√ßamentos", "Balan√ßo Financeiro", "Exportar Dados"],
        label_visibility="collapsed"
    )

# P√°gina: Ajuda
if pagina == "Ajuda":
    st.title("üìã Ajuda - Livro Caixa")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### Sistema Simplificado de Livro Caixa
        
        Este programa serve para lan√ßar todas as receitas e despesas da empresa
        de forma simples e organizada.
        
        **‚ú® Funcionalidades:**
        - ‚úÖ **Acesso Protegido**: Sistema de login seguro
        - ‚úÖ **Gerenciamento de Usu√°rios**: Crie e gerencie m√∫ltiplos usu√°rios
        - ‚úÖ **Banco de Dados SQLite**: Dados salvos localmente
        - ‚úÖ **Contas Personaliz√°veis**: Adicione suas pr√≥prias contas
        - ‚úÖ **Edi√ß√£o de Lan√ßamentos**: Edite ou exclua lan√ßamentos existentes
        - ‚úÖ **Relat√≥rios**: Balan√ßo financeiro com gr√°ficos
        - ‚úÖ **Exporta√ß√£o**: Backup dos dados em CSV
        
        **üìù Nota:** N√£o se esque√ßa do saldo inicial em janeiro!
        """)
        
        st.markdown("---")
        st.subheader("üéØ Como Usar:")
        
        st.markdown("""
        1. **üìù Contas**: Configure suas contas personalizadas
        2. **üì• Lan√ßamentos**: Adicione entradas e sa√≠das por m√™s
        3. **‚úèÔ∏è Editar**: Modifique ou exclua lan√ßamentos existentes
        4. **üìà Balan√ßo**: Veja relat√≥rios e gr√°ficos
        5. **üíæ Exportar**: Fa√ßa backup dos dados
        """)
    
    with col2:
        st.subheader("üí° Dicas Importantes")
        
        st.markdown("""
        **üí∞ Movimenta√ß√µes:**
        - **Deposito em banco** ‚Üí **Sa√≠da** do caixa
        - **Retirada do banco** ‚Üí **Entrada** do caixa
        - **Pagamento** ‚Üí **Sa√≠da** do caixa
        - **Recebimento** ‚Üí **Entrada** do caixa
        
        **üîê Seguran√ßa:**
        - Altere a senha padr√£o do admin
        - Crie usu√°rios individuais para cada pessoa
        - Mantenha suas credenciais seguras
        - Fa√ßa logout ao terminar
        """)
        
        # Informa√ß√µes sobre gerenciamento de usu√°rios
        if st.session_state.username == 'admin':
            st.subheader("üë• Admin")
            st.markdown("""
            **Privil√©gios de administrador:**
            - Criar novos usu√°rios
            - Excluir usu√°rios
            - Ver todos os usu√°rios
            - Gerenciar todo o sistema
            """)

# P√°gina: Contas (SIMPLIFICADA)
elif pagina == "Contas":
    st.title("üìù Contas")
    
    # Buscar contas do banco
    contas = get_contas()
    
    # Lista de contas existentes
    #st.subheader("üìã Contas Cadastradas")
    #if contas:
        #for i, conta in enumerate(contas, 1):
            #st.write(f"{i}. {conta}")
    #else:
        #st.info("üì≠ Nenhuma conta cadastrada ainda.")
    
    #st.markdown("---")
    
    # Adicionar nova conta
    st.subheader("‚ûï Adicionar Nova Conta")
    
    nova_conta = st.text_input("**Nome da Nova Conta**", placeholder="Ex: Sal√°rios, Aluguel, Vendas...")
    
    if st.button("‚úÖ Adicionar Conta", use_container_width=True) and nova_conta:
        adicionar_conta(nova_conta)
        st.rerun()

# P√°gina: Lan√ßamentos
elif pagina == "Lan√ßamentos":
    st.title("üì• Lan√ßamentos do Caixa")
    
    meses = [
        "Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
    ]
    
    # Layout responsivo para sele√ß√£o de m√™s
    col1, col2 = st.columns([1, 3])
    
    with col1:
        mes_selecionado = st.selectbox("**Selecione o M√™s**", meses)
    
    with col2:
        st.info(f"üíº Trabalhando no m√™s de **{mes_selecionado}**")
    
    # Buscar lan√ßamentos do banco
    df_mes = get_lancamentos_mes(mes_selecionado)
    
    # Formul√°rio para adicionar lan√ßamento
    st.subheader("‚ûï Adicionar Lan√ßamento")
    
    # Layout responsivo para o formul√°rio
    with st.form("form_lancamento", clear_on_submit=True):
        col3, col4, col5 = st.columns([2, 2, 1])
        
        with col3:
            data = st.date_input("**Data**", datetime.now().date())
            historico = st.text_input("**Hist√≥rico**", placeholder="Descri√ß√£o do lan√ßamento...")
        
        with col4:
            complemento = st.text_input("**Complemento**", placeholder="Informa√ß√µes adicionais...")
            tipo_movimento = st.selectbox("**Tipo de Movimento**", ["Entrada", "Sa√≠da"])
        
        with col5:
            if tipo_movimento == "Entrada":
                entrada = st.number_input("**Valor (R$)**", min_value=0.0, step=0.01, format="%.2f")
                saida = 0.0
            else:
                saida = st.number_input("**Valor (R$)**", min_value=0.0, step=0.01, format="%.2f")
                entrada = 0.0
        
        submitted = st.form_submit_button("üíæ Salvar Lan√ßamento", use_container_width=True)
        
        if submitted and historico:
            # Calcular saldo
            if df_mes.empty:
                saldo = entrada - saida
            else:
                # Verifica se a coluna SALDO existe e tem dados
                if 'SALDO' in df_mes.columns and len(df_mes) > 0:
                    saldo_anterior = df_mes.iloc[-1]['SALDO']
                else:
                    saldo_anterior = 0.0
                saldo = saldo_anterior + entrada - saida
            
            # Salvar no banco
            salvar_lancamento(mes_selecionado, data, historico, complemento, entrada, saida, saldo)
            st.rerun()
    
    # Exibir lan√ßamentos do m√™s com op√ß√£o de edi√ß√£o
    st.subheader(f"üìã Lan√ßamentos - {mes_selecionado}")
    
    if not df_mes.empty:
        # Mapear colunas do banco para os nomes exibidos
        colunas_mapeadas = {
            'ID': 'ID',
            'DATA': 'DATA',
            'HISTORICO': 'HIST√ìRICO', 
            'COMPLEMENTO': 'COMPLEMENTO',
            'ENTRADA': 'ENTRADA',
            'SAIDA': 'SA√çDA',
            'SALDO': 'SALDO'
        }
        
        # Filtrar apenas colunas que existem no DataFrame
        colunas_existentes = [col for col in colunas_mapeadas.keys() if col in df_mes.columns]
        
        if colunas_existentes:
            df_exibir = df_mes[colunas_existentes].copy()
            
            # Renomear colunas para exibi√ß√£o
            df_exibir.columns = [colunas_mapeadas[col] for col in colunas_existentes]
            
            # Formatar colunas para exibi√ß√£o
            df_exibir_display = df_exibir.copy()
            if 'DATA' in df_exibir_display.columns:
                df_exibir_display['DATA'] = pd.to_datetime(df_exibir_display['DATA']).dt.strftime('%d/%m/%Y')
            if 'ENTRADA' in df_exibir_display.columns:
                df_exibir_display['ENTRADA'] = df_exibir_display['ENTRADA'].apply(lambda x: f"R$ {x:,.2f}" if x > 0 else "")
            if 'SA√çDA' in df_exibir_display.columns:
                df_exibir_display['SA√çDA'] = df_exibir_display['SA√çDA'].apply(lambda x: f"R$ {x:,.2f}" if x > 0 else "")
            if 'SALDO' in df_exibir_display.columns:
                df_exibir_display['SALDO'] = df_exibir_display['SALDO'].apply(lambda x: f"R$ {x:,.2f}")
            
            # Exibir tabela responsiva
            st.dataframe(df_exibir_display, use_container_width=True, hide_index=True)
            
            # Download CSV individual do m√™s
            st.subheader("üì• Download do M√™s")
            csv_data = download_csv_mes(mes_selecionado)
            if csv_data:
                st.download_button(
                    label=f"üíæ Baixar {mes_selecionado} em CSV",
                    data=csv_data,
                    file_name=f"livro_caixa_{mes_selecionado}_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
            
            # Se√ß√£o de Edi√ß√£o de Lan√ßamentos
            st.subheader("‚úèÔ∏è Gerenciar Lan√ßamentos")
            
            # Selecionar lan√ßamento para editar
            if 'ID' in df_exibir.columns:
                lancamentos_opcoes = []
                for idx, row in df_exibir.iterrows():
                    valor = row['ENTRADA'] if row['ENTRADA'] > 0 else row['SA√çDA']
                    descricao = f"{row['DATA']} - {row['HIST√ìRICO']} - R$ {valor:,.2f}"
                    lancamentos_opcoes.append((row['ID'], descricao))
                
                if lancamentos_opcoes:
                    lancamento_selecionado = st.selectbox(
                        "**Selecione o lan√ßamento para editar/excluir:**",
                        options=lancamentos_opcoes,
                        format_func=lambda x: x[1]
                    )
                    
                    if lancamento_selecionado:
                        lancamento_id = lancamento_selecionado[0]
                        lancamento_data = df_exibir[df_exibir['ID'] == lancamento_id].iloc[0]
                        
                        col_edit, col_del = st.columns([3, 1])
                        
                        with col_edit:
                            # Formul√°rio de edi√ß√£o
                            with st.form("form_editar_lancamento"):
                                st.write("**Editar Lan√ßamento:**")
                                col6, col7, col8 = st.columns([2, 2, 1])
                                
                                with col6:
                                    data_editar = st.date_input("**Data**", 
                                                              value=datetime.strptime(str(lancamento_data['DATA']), '%Y-%m-%d').date() 
                                                              if isinstance(lancamento_data['DATA'], str) 
                                                              else lancamento_data['DATA'].date())
                                    historico_editar = st.text_input("**Hist√≥rico**", value=lancamento_data['HIST√ìRICO'])
                                
                                with col7:
                                    complemento_editar = st.text_input("**Complemento**", value=lancamento_data['COMPLEMENTO'] 
                                                                      if pd.notna(lancamento_data['COMPLEMENTO']) else "")
                                    
                                    # Determinar tipo de movimento baseado nos valores
                                    if lancamento_data['ENTRADA'] > 0:
                                        tipo_movimento_editar = "Entrada"
                                        entrada_editar = st.number_input("**Valor Entrada (R$)**", 
                                                                        value=float(lancamento_data['ENTRADA']), 
                                                                        min_value=0.0, step=0.01, format="%.2f")
                                        saida_editar = 0.0
                                    else:
                                        tipo_movimento_editar = "Sa√≠da"
                                        saida_editar = st.number_input("**Valor Sa√≠da (R$)**", 
                                                                      value=float(lancamento_data['SA√çDA']), 
                                                                      min_value=0.0, step=0.01, format="%.2f")
                                        entrada_editar = 0.0
                                
                                with col8:
                                    st.write("")  # Espa√ßamento
                                    st.write("")  # Espa√ßamento
                                    submitted_editar = st.form_submit_button("üíæ Atualizar", use_container_width=True)
                                
                                if submitted_editar and historico_editar:
                                    # Atualizar lan√ßamento no banco
                                    if atualizar_lancamento(lancamento_id, mes_selecionado, data_editar, historico_editar, 
                                                          complemento_editar, entrada_editar, saida_editar):
                                        st.success("‚úÖ Lan√ßamento atualizado com sucesso!")
                                        st.rerun()
                        
                        with col_del:
                            st.write("**Excluir:**")
                            if st.button("üóëÔ∏è Excluir", use_container_width=True, type="secondary"):
                                if st.checkbox("‚úÖ Confirmar exclus√£o"):
                                    if excluir_lancamento(lancamento_id, mes_selecionado):
                                        st.success("‚úÖ Lan√ßamento exclu√≠do com sucesso!")
                                        st.rerun()
            
            # Estat√≠sticas do m√™s
            st.subheader("üìä Estat√≠sticas do M√™s")
            
            col9, col10, col11 = st.columns(3)
            
            total_entradas = df_mes['ENTRADA'].sum() if 'ENTRADA' in df_mes.columns else 0.0
            total_saidas = df_mes['SAIDA'].sum() if 'SAIDA' in df_mes.columns else 0.0
            
            if 'SALDO' in df_mes.columns and len(df_mes) > 0:
                saldo_atual = df_mes.iloc[-1]['SALDO']
            else:
                saldo_atual = 0.0
            
            with col9:
                st.metric("üí∞ Total de Entradas", f"R$ {total_entradas:,.2f}")
            with col10:
                st.metric("üí∏ Total de Sa√≠das", f"R$ {total_saidas:,.2f}")
            with col11:
                st.metric("üè¶ Saldo Atual", f"R$ {saldo_atual:,.2f}")
        else:
            st.warning("‚ö†Ô∏è Estrutura de dados incompat√≠vel.")
            st.dataframe(df_mes, use_container_width=True)
    else:
        st.info(f"üì≠ Nenhum lan√ßamento encontrado para {mes_selecionado}")
    
    # Bot√£o para limpar lan√ßamentos do m√™s
    if st.button(f"üóëÔ∏è Limpar TODOS os Lan√ßamentos de {mes_selecionado}", use_container_width=True, type="secondary"):
        if st.checkbox("‚úÖ Confirmar exclus√£o de TODOS os lan√ßamentos"):
            limpar_lancamentos_mes(mes_selecionado)
            st.rerun()

# P√°gina: Balan√ßo Financeiro
elif pagina == "Balan√ßo Financeiro":
    st.title("üìà Balan√ßo Financeiro")
    
    # Calcular totais anuais
    total_entradas_anual = 0.0
    total_saidas_anual = 0.0
    dados_mensais = []
    
    meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
            "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
    
    with st.spinner("üìä Calculando balan√ßo..."):
        for mes in meses:
            df_mes = get_lancamentos_mes(mes)
            if not df_mes.empty:
                entradas_mes = df_mes['ENTRADA'].sum() if 'ENTRADA' in df_mes.columns else 0.0
                saidas_mes = df_mes['SAIDA'].sum() if 'SAIDA' in df_mes.columns else 0.0
                
                if 'SALDO' in df_mes.columns and len(df_mes) > 0:
                    saldo_mes = df_mes.iloc[-1]['SALDO']
                else:
                    saldo_mes = 0.0
                
                total_entradas_anual += entradas_mes
                total_saidas_anual += saidas_mes
                
                dados_mensais.append({
                    'M√™s': mes,
                    'Entradas': entradas_mes,
                    'Sa√≠das': saidas_mes,
                    'Saldo': saldo_mes
                })
    
    saldo_final_anual = total_entradas_anual - total_saidas_anual
    
    # Layout responsivo
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üì• D√©bitos")
        st.metric("**Total de Entradas Anual**", f"R$ {total_entradas_anual:,.2f}")
        
        st.subheader("üìÖ Resumo por M√™s")
        for dados in dados_mensais:
            with st.expander(f"üìÅ {dados['M√™s']}"):
                st.write(f"**Entradas:** R$ {dados['Entradas']:,.2f}")
                st.write(f"**Sa√≠das:** R$ {dados['Sa√≠das']:,.2f}")
                st.write(f"**Saldo:** R$ {dados['Saldo']:,.2f}")
    
    with col2:
        st.subheader("üì§ Cr√©ditos")
        st.metric("**Total de Sa√≠das Anual**", f"R$ {total_saidas_anual:,.2f}")
        st.metric("**Saldo Final Anual**", f"R$ {saldo_final_anual:,.2f}", 
                 delta=f"R$ {saldo_final_anual:,.2f}")
        
        # Gr√°fico simples de barras
        if dados_mensais:
            st.subheader("üìä Resumo Visual")
            df_grafico = pd.DataFrame(dados_mensais)
            st.bar_chart(df_grafico.set_index('M√™s')[['Entradas', 'Sa√≠das']], use_container_width=True)

# P√°gina: Exportar Dados
elif pagina == "Exportar Dados":
    st.title("üíæ Exportar Dados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üì§ Exportar Dados")
        
        st.info("üí° Os arquivos CSV podem ser abertos diretamente no Excel")
        
        # Download de CSV individual por m√™s
        st.subheader("üì• Download por M√™s")
        meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        
        mes_download = st.selectbox("**Selecione o m√™s para download:**", meses)
        csv_data = download_csv_mes(mes_download)
        
        if csv_data:
            st.download_button(
                label=f"üíæ Baixar {mes_download} em CSV",
                data=csv_data,
                file_name=f"livro_caixa_{mes_download}_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        else:
            st.warning(f"üì≠ Nenhum dado encontrado para {mes_download}")
        
        st.markdown("---")
        
        # Exporta√ß√£o completa
        st.subheader("üì¶ Exporta√ß√£o Completa")
        if st.button("üì¶ Exportar Todos os Dados", use_container_width=True):
            with st.spinner("Gerando arquivo ZIP..."):
                output = exportar_para_csv()
                
                if output is not None:
                    st.download_button(
                        label="üíæ Baixar Arquivo ZIP Completo",
                        data=output,
                        file_name=f"livro_caixa_completo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                        mime="application/zip",
                        use_container_width=True
                    )
                    st.success("‚úÖ Arquivo ZIP gerado com sucesso!")
                else:
                    st.error("‚ùå Erro ao gerar arquivo de exporta√ß√£o")
    
    with col2:
        st.subheader("üìä Informa√ß√µes do Sistema")
        
        # Estat√≠sticas do banco
        conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
        
        try:
            total_lancamentos = pd.read_sql("SELECT COUNT(*) as total FROM lancamentos", conn).iloc[0]['total']
            total_contas = pd.read_sql("SELECT COUNT(*) as total FROM contas", conn).iloc[0]['total']
            meses_com_dados = pd.read_sql("SELECT COUNT(DISTINCT mes) as total FROM lancamentos", conn).iloc[0]['total']
        except:
            total_lancamentos = 0
            total_contas = 0
            meses_com_dados = 0
        
        conn.close()
        
        st.metric("üìù Total de Lan√ßamentos", total_lancamentos)
        st.metric("üìã Total de Contas", total_contas)
        st.metric("üìÖ Meses com Dados", meses_com_dados)
        
        st.info("""
        **‚ÑπÔ∏è Informa√ß√µes do Sistema:**
        - **Banco de Dados:** SQLite
        - **Arquivo:** `livro_caixa.db`
        - **Dados:** Persistidos localmente
        - **Exporta√ß√£o:** CSV compat√≠vel com Excel
        - **Seguran√ßa:** Acesso por login
        - **Usu√°rios:** M√∫ltiplos usu√°rios suportados
        """)

# Rodap√©
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666; font-size: 0.9rem;'>
        <strong>CONSTITUCIONALISTAS-929</strong> - Livro Caixa | 
        Desenvolvido por Silmar Tolotto | 
        Usu√°rio: {username} | 
        {date}
    </div>
    """.format(username=st.session_state.username, date=datetime.now().strftime('%d/%m/%Y %H:%M')),
    unsafe_allow_html=True
)
