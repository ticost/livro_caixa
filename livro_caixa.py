import streamlit as st
import pandas as pd
from datetime import datetime
import io
import sqlite3
import base64
from pathlib import Path
import os

# Configura√ß√£o da p√°gina para melhor responsividade
st.set_page_config(
    page_title="Livro Caixa",
    page_icon="üìí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para melhor responsividade
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stDataFrame {
        font-size: 0.9rem;
    }
    @media (max-width: 768px) {
        .stDataFrame {
            font-size: 0.8rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para carregar e exibir a imagem do logo
def carregar_imagem_logo(caminho_imagem="Logo_Loja.png"):
    """Carrega e exibe a imagem do logo na sidebar"""
    try:
        # Verifica se o arquivo existe
        if os.path.exists(caminho_imagem):
            # L√™ a imagem e converte para base64
            with open(caminho_imagem, "rb") as img_file:
                img_base64 = base64.b64encode(img_file.read()).decode()
            
            # Exibe a imagem na sidebar
            st.sidebar.markdown(
                f"""
                <div style="text-align: center; padding: 10px; margin-bottom: 20px;">
                    <img src="data:image/png;base64,{img_base64}" style="max-width: 100%; height: auto; border-radius: 10px;">
                </div>
                """,
                unsafe_allow_html=True
            )
            return True
        else:
            # Se a imagem n√£o existe, mostra o texto como fallback
            st.sidebar.markdown(
                """
                <div style="text-align: center; padding: 10px; background: linear-gradient(135deg, #1f77b4, #ff7f0e); 
                            border-radius: 10px; margin-bottom: 20px; color: white;">
                    <h2 style="margin-bottom: 5px; font-weight: bold; font-size: 1.2rem;">CONSTITUCIONALISTAS</h2>
                    <h3 style="margin-top: 0; font-weight: bold; font-size: 1rem;">929</h3>
                </div>
                """,
                unsafe_allow_html=True
            )
            return False
    except Exception as e:
        st.sidebar.error(f"Erro ao carregar logo: {str(e)}")
        return False

# Fun√ß√µes para o banco de dados
def init_db():
    """Inicializa o banco de dados SQLite"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    
    # Tabela para lan√ßamentos
    c.execute('''
        CREATE TABLE IF NOT EXISTS lancamentos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            mes TEXT NOT NULL,
            data DATE NOT NULL,
            historico TEXT NOT NULL,
            complemento TEXT,
            entrada REAL DEFAULT 0,
            saida REAL DEFAULT 0,
            saldo REAL DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Tabela para plano de contas
    c.execute('''
        CREATE TABLE IF NOT EXISTS plano_contas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tipo TEXT NOT NULL,
            conta TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Inserir plano de contas padr√£o se a tabela estiver vazia
    c.execute('SELECT COUNT(*) FROM plano_contas')
    if c.fetchone()[0] == 0:
        contas_padrao = [
            ('RECEITAS', 'Rendimentos PF n√£o Assalariado'),
            ('RECEITAS', 'Rendimentos PJ n√£o Assalariado'),
            ('RECEITAS', 'Rendimentos PJ Assalariado'),
            ('RECEITAS', 'Receitas de alugu√©is'),
            ('RECEITAS', 'Lucros na Venda de bens patrimoniais'),
            ('RECEITAS', 'Rendas Extraordinarias'),
            ('DESPESAS', 'Compras de mercadorias'),
            ('DESPESAS', 'Fretes e Seguros sobre compras'),
            ('DESPESAS', 'Agua e esgoto'),
            ('DESPESAS', 'Energia El√©trica'),
            ('DESPESAS', 'Telefones'),
            ('DESPESAS', 'Provedor - Internet'),
            ('DESPESAS', 'Material de Limpeza'),
            ('DESPESAS', 'Material de Expediente'),
            ('DESPESAS', 'Aluguel'),
            ('DESPESAS', 'Sal√°rios'),
            ('DESPESAS', 'INSS'),
            ('DESPESAS', 'IRRF'),
            ('DESPESAS', 'FGTS')
        ]
        c.executemany('INSERT INTO plano_contas (tipo, conta) VALUES (?, ?)', contas_padrao)
    
    conn.commit()
    conn.close()

def get_lancamentos_mes(mes):
    """Busca lan√ßamentos de um m√™s espec√≠fico"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    try:
        df = pd.read_sql(f"SELECT * FROM lancamentos WHERE mes = '{mes}' ORDER BY data, id", conn)
        # Renomear colunas para mai√∫sculas para compatibilidade
        df.columns = [col.upper() for col in df.columns]
    except Exception as e:
        st.error(f"Erro ao buscar lan√ßamentos: {e}")
        df = pd.DataFrame(columns=['ID', 'MES', 'DATA', 'HISTORICO', 'COMPLEMENTO', 'ENTRADA', 'SAIDA', 'SALDO', 'CREATED_AT'])
    finally:
        conn.close()
    return df

def salvar_lancamento(mes, data, historico, complemento, entrada, saida, saldo):
    """Salva um novo lan√ßamento no banco"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute('''
            INSERT INTO lancamentos (mes, data, historico, complemento, entrada, saida, saldo)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (mes, data, historico, complemento, entrada, saida, saldo))
        conn.commit()
        st.success("‚úÖ Lan√ßamento adicionado com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro ao salvar lan√ßamento: {e}")
        conn.rollback()
    finally:
        conn.close()

def limpar_lancamentos_mes(mes):
    """Remove todos os lan√ßamentos de um m√™s"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute('DELETE FROM lancamentos WHERE mes = ?', (mes,))
        conn.commit()
        st.success(f"‚úÖ Lan√ßamentos de {mes} removidos com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro ao limpar lan√ßamentos: {e}")
        conn.rollback()
    finally:
        conn.close()

def get_plano_contas():
    """Busca o plano de contas"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    try:
        df = pd.read_sql("SELECT tipo, conta FROM plano_contas ORDER BY tipo, conta", conn)
    except Exception as e:
        st.error(f"Erro ao buscar plano de contas: {e}")
        df = pd.DataFrame(columns=['tipo', 'conta'])
    finally:
        conn.close()
    
    # Converter para o formato do dicion√°rio
    plano_contas = {'RECEITAS': [], 'DESPESAS': []}
    for _, row in df.iterrows():
        plano_contas[row['tipo']].append(row['conta'])
    
    return plano_contas

def adicionar_conta_plano(tipo, conta):
    """Adiciona uma nova conta ao plano de contas"""
    conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute('INSERT INTO plano_contas (tipo, conta) VALUES (?, ?)', (tipo, conta))
        conn.commit()
        st.success(f"‚úÖ Conta '{conta}' adicionada com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro ao adicionar conta: {e}")
        conn.rollback()
    finally:
        conn.close()

# Fun√ß√£o para exportar dados em formato CSV (sem depend√™ncias externas)
def exportar_para_csv():
    """Exporta dados para formato CSV que pode ser aberto no Excel"""
    try:
        # Criar um arquivo ZIP em mem√≥ria com m√∫ltiplos CSVs
        output = io.BytesIO()
        
        # Criar estrutura de dados para exporta√ß√£o
        dados_exportacao = {}
        
        # Informa√ß√µes do sistema
        dados_exportacao['00_Informacoes.csv'] = pd.DataFrame({
            'Sistema': ['Livro Caixa - CONSTITUCIONALISTAS-929'],
            'Exportado_em': [datetime.now().strftime('%d/%m/%Y %H:%M:%S')],
            'Desenvolvido_por': ['Silmar Tolotto']
        })
        
        # Plano de contas
        plano_contas = get_plano_contas()
        plano_contas_lista = []
        for tipo, contas in plano_contas.items():
            for conta in contas:
                plano_contas_lista.append({'Tipo': tipo, 'Conta': conta})
        dados_exportacao['01_Plano_Contas.csv'] = pd.DataFrame(plano_contas_lista)
        
        # Lan√ßamentos por m√™s
        meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        
        for mes in meses:
            df_mes = get_lancamentos_mes(mes)
            if not df_mes.empty:
                # Selecionar e renomear colunas
                colunas_exportar = []
                mapeamento_colunas = {}
                
                if 'DATA' in df_mes.columns:
                    colunas_exportar.append('DATA')
                    mapeamento_colunas['DATA'] = 'Data'
                if 'HISTORICO' in df_mes.columns:
                    colunas_exportar.append('HISTORICO')
                    mapeamento_colunas['HISTORICO'] = 'Hist√≥rico'
                if 'COMPLEMENTO' in df_mes.columns:
                    colunas_exportar.append('COMPLEMENTO')
                    mapeamento_colunas['COMPLEMENTO'] = 'Complemento'
                if 'ENTRADA' in df_mes.columns:
                    colunas_exportar.append('ENTRADA')
                    mapeamento_colunas['ENTRADA'] = 'Entrada_R$'
                if 'SAIDA' in df_mes.columns:
                    colunas_exportar.append('SAIDA')
                    mapeamento_colunas['SAIDA'] = 'Sa√≠da_R$'
                if 'SALDO' in df_mes.columns:
                    colunas_exportar.append('SALDO')
                    mapeamento_colunas['SALDO'] = 'Saldo_R$'
                
                if colunas_exportar:
                    df_export = df_mes[colunas_exportar].copy()
                    df_export.columns = [mapeamento_colunas[col] for col in colunas_exportar]
                    
                    # Formatar datas
                    if 'Data' in df_export.columns:
                        df_export['Data'] = pd.to_datetime(df_export['Data']).dt.strftime('%d/%m/%Y')
                    
                    dados_exportacao[f'02_{mes}.csv'] = df_export
        
        # Criar um arquivo ZIP com todos os CSVs
        import zipfile
        with zipfile.ZipFile(output, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for nome_arquivo, df in dados_exportacao.items():
                csv_data = df.to_csv(index=False, encoding='utf-8-sig')  # UTF-8 com BOM para Excel
                zipf.writestr(nome_arquivo, csv_data)
        
        output.seek(0)
        return output
        
    except Exception as e:
        st.error(f"‚ùå Erro ao exportar dados: {e}")
        return None

# Fun√ß√£o alternativa para exportar dados simples em CSV √∫nico
def exportar_csv_simples():
    """Exporta todos os dados em um √∫nico arquivo CSV"""
    try:
        output = io.BytesIO()
        
        # Coletar todos os dados
        todos_dados = []
        
        meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        
        for mes in meses:
            df_mes = get_lancamentos_mes(mes)
            if not df_mes.empty:
                for _, row in df_mes.iterrows():
                    dados_linha = {
                        'M√™s': mes,
                        'Data': row['DATA'] if 'DATA' in row else '',
                        'Hist√≥rico': row['HISTORICO'] if 'HISTORICO' in row else '',
                        'Complemento': row['COMPLEMENTO'] if 'COMPLEMENTO' in row else '',
                        'Entrada_R$': row['ENTRADA'] if 'ENTRADA' in row else 0,
                        'Sa√≠da_R$': row['SAIDA'] if 'SAIDA' in row else 0,
                        'Saldo_R$': row['SALDO'] if 'SALDO' in row else 0
                    }
                    todos_dados.append(dados_linha)
        
        df_export = pd.DataFrame(todos_dados)
        
        # Formatar datas
        if not df_export.empty and 'Data' in df_export.columns:
            df_export['Data'] = pd.to_datetime(df_export['Data']).dt.strftime('%d/%m/%Y')
        
        # Converter para CSV
        csv_data = df_export.to_csv(index=False, encoding='utf-8-sig')
        output.write(csv_data.encode('utf-8-sig'))
        output.seek(0)
        
        return output
        
    except Exception as e:
        st.error(f"‚ùå Erro ao exportar CSV simples: {e}")
        return None

# Inicializar banco de dados
init_db()

# Sidebar com logo
with st.sidebar:
    # Tenta carregar a imagem do logo
    logo_carregado = carregar_imagem_logo("Logo_Loja.png")
    
    if not logo_carregado:
        st.sidebar.info("üí° Para usar seu logo, coloque o arquivo 'Logo_Loja.png' na mesma pasta do aplicativo")
    
    st.title("üìí Livro Caixa")
    st.markdown("---")
    
    pagina = st.radio(
        "**Navega√ß√£o:**",
        ["Ajuda", "Plano de Contas", "Lan√ßamentos", "Balan√ßo Financeiro", "Exportar/Importar"],
        label_visibility="collapsed"
    )

# P√°gina: Ajuda
if pagina == "Ajuda":
    st.title("üìã Ajuda - Livro Caixa")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### Vers√£o 2.0 com Banco de Dados
        
        Este programa de livro Caixa servir√° para lan√ßar todas as receitas e despesas ocorridas na empresa
        durante todo o ano e diariamente se voc√™ preferir.
        
        **‚ú® Funcionalidades:**
        - ‚úÖ **Banco de Dados SQLite**: Todos os dados s√£o salvos localmente
        - ‚úÖ **Persist√™ncia**: Dados mantidos entre execu√ß√µes
        - ‚úÖ **Relat√≥rios**: Balan√ßo financeiro com gr√°ficos
        - ‚úÖ **Exporta√ß√£o**: Backup dos dados em CSV/Excel
        
        **üìù Nota:** N√£o se esque√ßa de escrever o saldo do caixa anterior em saldo inicial em janeiro!
        """)
        
        st.markdown("---")
        st.subheader("üéØ Como Usar:")
        
        st.markdown("""
        1. **üì• Lan√ßamentos**: Adicione entradas e sa√≠das por m√™s
        2. **üìä Plano de Contas**: Gerencie suas categorias
        3. **üìà Balan√ßo**: Veja relat√≥rios e gr√°ficos
        4. **üíæ Exportar**: Fa√ßa backup dos dados
        """)
    
    with col2:
        st.subheader("üí° Dicas Importantes")
        
        st.markdown("""
        **üí∞ Movimenta√ß√µes:**
        - **Deposito em banco** ‚Üí **Sa√≠da** do caixa
        - **Retirada do banco** ‚Üí **Entrada** do caixa
        - **Pagamento de contas** ‚Üí **Sa√≠da** do caixa
        - **Recebimento de valores** ‚Üí **Entrada** do caixa
        
        **‚ö° Atalhos:**
        - Use `Tab` para navegar entre campos
        - `Enter` para confirmar lan√ßamentos
        - Exporte regularmente para backup
        """)

elif pagina == "Plano de Contas":
    st.title("üìä Plano de Contas")
    
    # Buscar plano de contas do banco
    plano_contas = get_plano_contas()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí∞ Receitas")
        for conta in plano_contas['RECEITAS']:
            st.write(f"‚Ä¢ {conta}")
    
    with col2:
        st.subheader("üí∏ Despesas")
        for conta in plano_contas['DESPESAS']:
            st.write(f"‚Ä¢ {conta}")
    
    st.markdown("---")
    
    # Adicionar nova conta
    st.subheader("‚ûï Adicionar Nova Conta")
    
    col3, col4 = st.columns([1, 2])
    
    with col3:
        tipo_conta = st.selectbox("**Tipo de Conta**", ["RECEITAS", "DESPESAS"])
    
    with col4:
        nova_conta = st.text_input("**Nome da Nova Conta**", placeholder="Digite o nome da nova conta...")
    
    if st.button("‚úÖ Adicionar Conta", use_container_width=True) and nova_conta:
        adicionar_conta_plano(tipo_conta, nova_conta)
        st.rerun()

elif pagina == "Lan√ßamentos":
    st.title("üì• Lan√ßamentos do Caixa")
    
    meses = [
        "Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
    ]
    
    # Layout responsivo para sele√ß√£o de m√™s
    col1, col2 = st.columns([1, 3])
    
    with col1:
        mes_selecionado = st.selectbox("**Selecione o M√™s**", meses)
    
    with col2:
        st.info(f"üíº Trabalhando no m√™s de **{mes_selecionado}**")
    
    # Buscar lan√ßamentos do banco
    df_mes = get_lancamentos_mes(mes_selecionado)
    
    # Formul√°rio para adicionar lan√ßamento
    st.subheader("‚ûï Adicionar Lan√ßamento")
    
    # Layout responsivo para o formul√°rio
    with st.form("form_lancamento", clear_on_submit=True):
        col3, col4, col5 = st.columns([2, 2, 1])
        
        with col3:
            data = st.date_input("**Data**", datetime.now().date())
            historico = st.text_input("**Hist√≥rico**", placeholder="Descri√ß√£o do lan√ßamento...")
        
        with col4:
            complemento = st.text_input("**Complemento**", placeholder="Informa√ß√µes adicionais...")
            tipo_movimento = st.selectbox("**Tipo de Movimento**", ["Entrada", "Sa√≠da"])
        
        with col5:
            if tipo_movimento == "Entrada":
                entrada = st.number_input("**Valor (R$)**", min_value=0.0, step=0.01, format="%.2f")
                saida = 0.0
            else:
                saida = st.number_input("**Valor (R$)**", min_value=0.0, step=0.01, format="%.2f")
                entrada = 0.0
        
        submitted = st.form_submit_button("üíæ Salvar Lan√ßamento", use_container_width=True)
        
        if submitted and historico:
            # Calcular saldo
            if df_mes.empty:
                saldo = entrada - saida
            else:
                # Verifica se a coluna SALDO existe e tem dados
                if 'SALDO' in df_mes.columns and len(df_mes) > 0:
                    saldo_anterior = df_mes.iloc[-1]['SALDO']
                else:
                    saldo_anterior = 0.0
                saldo = saldo_anterior + entrada - saida
            
            # Salvar no banco
            salvar_lancamento(mes_selecionado, data, historico, complemento, entrada, saida, saldo)
            st.rerun()
    
    # Exibir lan√ßamentos do m√™s
    st.subheader(f"üìã Lan√ßamentos - {mes_selecionado}")
    
    if not df_mes.empty:
        # Mapear colunas do banco para os nomes exibidos
        colunas_mapeadas = {
            'DATA': 'DATA',
            'HISTORICO': 'HIST√ìRICO', 
            'COMPLEMENTO': 'COMPLEMENTO',
            'ENTRADA': 'ENTRADA',
            'SAIDA': 'SA√çDA',
            'SALDO': 'SALDO'
        }
        
        # Filtrar apenas colunas que existem no DataFrame
        colunas_existentes = [col for col in colunas_mapeadas.keys() if col in df_mes.columns]
        
        if colunas_existentes:
            df_exibir = df_mes[colunas_existentes].copy()
            
            # Renomear colunas para exibi√ß√£o
            df_exibir.columns = [colunas_mapeadas[col] for col in colunas_existentes]
            
            # Formatar colunas
            if 'DATA' in df_exibir.columns:
                df_exibir['DATA'] = pd.to_datetime(df_exibir['DATA']).dt.strftime('%d/%m/%Y')
            if 'ENTRADA' in df_exibir.columns:
                df_exibir['ENTRADA'] = df_exibir['ENTRADA'].apply(lambda x: f"R$ {x:,.2f}" if x > 0 else "")
            if 'SA√çDA' in df_exibir.columns:
                df_exibir['SA√çDA'] = df_exibir['SA√çDA'].apply(lambda x: f"R$ {x:,.2f}" if x > 0 else "")
            if 'SALDO' in df_exibir.columns:
                df_exibir['SALDO'] = df_exibir['SALDO'].apply(lambda x: f"R$ {x:,.2f}")
            
            # Exibir tabela responsiva
            st.dataframe(df_exibir, use_container_width=True, hide_index=True)
            
            # Estat√≠sticas do m√™s
            st.subheader("üìä Estat√≠sticas do M√™s")
            
            col6, col7, col8 = st.columns(3)
            
            total_entradas = df_mes['ENTRADA'].sum() if 'ENTRADA' in df_mes.columns else 0.0
            total_saidas = df_mes['SAIDA'].sum() if 'SAIDA' in df_mes.columns else 0.0
            
            if 'SALDO' in df_mes.columns and len(df_mes) > 0:
                saldo_atual = df_mes.iloc[-1]['SALDO']
            else:
                saldo_atual = 0.0
            
            with col6:
                st.metric("üí∞ Total de Entradas", f"R$ {total_entradas:,.2f}")
            with col7:
                st.metric("üí∏ Total de Sa√≠das", f"R$ {total_saidas:,.2f}")
            with col8:
                st.metric("üè¶ Saldo Atual", f"R$ {saldo_atual:,.2f}")
        else:
            st.warning("‚ö†Ô∏è Estrutura de dados incompat√≠vel. Mostrando dados brutos:")
            st.dataframe(df_mes, use_container_width=True)
    else:
        st.info(f"üì≠ Nenhum lan√ßamento encontrado para {mes_selecionado}")
    
    # Bot√£o para limpar lan√ßamentos do m√™s
    if st.button(f"üóëÔ∏è Limpar Todos os Lan√ßamentos de {mes_selecionado}", use_container_width=True, type="secondary"):
        if st.checkbox("‚úÖ Confirmar exclus√£o de todos os lan√ßamentos deste m√™s"):
            limpar_lancamentos_mes(mes_selecionado)
            st.rerun()

elif pagina == "Balan√ßo Financeiro":
    st.title("üìà Balan√ßo Financeiro")
    
    # Calcular totais anuais
    total_entradas_anual = 0.0
    total_saidas_anual = 0.0
    dados_mensais = []
    
    meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
            "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
    
    with st.spinner("üìä Calculando balan√ßo..."):
        for mes in meses:
            df_mes = get_lancamentos_mes(mes)
            if not df_mes.empty:
                entradas_mes = df_mes['ENTRADA'].sum() if 'ENTRADA' in df_mes.columns else 0.0
                saidas_mes = df_mes['SAIDA'].sum() if 'SAIDA' in df_mes.columns else 0.0
                
                if 'SALDO' in df_mes.columns and len(df_mes) > 0:
                    saldo_mes = df_mes.iloc[-1]['SALDO']
                else:
                    saldo_mes = 0.0
                
                total_entradas_anual += entradas_mes
                total_saidas_anual += saidas_mes
                
                dados_mensais.append({
                    'M√™s': mes,
                    'Entradas': entradas_mes,
                    'Sa√≠das': saidas_mes,
                    'Saldo': saldo_mes
                })
    
    saldo_final_anual = total_entradas_anual - total_saidas_anual
    
    # Layout responsivo
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üì• D√©bitos")
        st.metric("**Total de Entradas Anual**", f"R$ {total_entradas_anual:,.2f}")
        
        st.subheader("üìÖ Resumo por M√™s")
        for dados in dados_mensais:
            with st.expander(f"üìÅ {dados['M√™s']}"):
                st.write(f"**Entradas:** R$ {dados['Entradas']:,.2f}")
                st.write(f"**Sa√≠das:** R$ {dados['Sa√≠das']:,.2f}")
                st.write(f"**Saldo:** R$ {dados['Saldo']:,.2f}")
    
    with col2:
        st.subheader("üì§ Cr√©ditos")
        st.metric("**Total de Sa√≠das Anual**", f"R$ {total_saidas_anual:,.2f}")
        st.metric("**Saldo Final Anual**", f"R$ {saldo_final_anual:,.2f}", 
                 delta=f"R$ {saldo_final_anual:,.2f}")
        
        # Gr√°fico simples de barras
        if dados_mensais:
            st.subheader("üìä Resumo Visual")
            df_grafico = pd.DataFrame(dados_mensais)
            st.bar_chart(df_grafico.set_index('M√™s')[['Entradas', 'Sa√≠das']], use_container_width=True)

elif pagina == "Exportar/Importar":
    st.title("üíæ Exportar/Importar Dados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üì§ Exportar Dados")
        
        st.info("üí° Os arquivos CSV podem ser abertos diretamente no Excel")
        
        # Op√ß√£o 1: Exportar como ZIP com m√∫ltiplos arquivos
        if st.button("üì¶ Exportar como ZIP (Arquivos Separados)", use_container_width=True):
            with st.spinner("Gerando arquivo ZIP..."):
                output = exportar_para_csv()
                
                if output is not None:
                    st.download_button(
                        label="üíæ Baixar Arquivo ZIP",
                        data=output,
                        file_name=f"livro_caixa_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                        mime="application/zip",
                        use_container_width=True
                    )
                    st.success("‚úÖ Arquivo ZIP gerado com sucesso!")
                    st.info("üìÅ O ZIP cont√©m arquivos separados por m√™s e plano de contas")
        
        # Op√ß√£o 2: Exportar como CSV √∫nico
        if st.button("üìÑ Exportar como CSV √önico", use_container_width=True):
            with st.spinner("Gerando arquivo CSV..."):
                output = exportar_csv_simples()
                
                if output is not None:
                    st.download_button(
                        label="üíæ Baixar Arquivo CSV",
                        data=output,
                        file_name=f"livro_caixa_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv",
                        use_container_width=True
                    )
                    st.success("‚úÖ Arquivo CSV gerado com sucesso!")
                    st.info("üí° Este arquivo pode ser aberto diretamente no Excel")
    
    with col2:
        st.subheader("üìä Informa√ß√µes do Sistema")
        
        # Estat√≠sticas do banco
        conn = sqlite3.connect('livro_caixa.db', check_same_thread=False)
        
        try:
            total_lancamentos = pd.read_sql("SELECT COUNT(*) as total FROM lancamentos", conn).iloc[0]['total']
            total_contas = pd.read_sql("SELECT COUNT(*) as total FROM plano_contas", conn).iloc[0]['total']
            meses_com_dados = pd.read_sql("SELECT COUNT(DISTINCT mes) as total FROM lancamentos", conn).iloc[0]['total']
        except:
            total_lancamentos = 0
            total_contas = 0
            meses_com_dados = 0
        
        conn.close()
        
        st.metric("üìù Total de Lan√ßamentos", total_lancamentos)
        st.metric("üìã Total de Contas", total_contas)
        st.metric("üìÖ Meses com Dados", meses_com_dados)
        
        st.info("""
        **‚ÑπÔ∏è Informa√ß√µes do Sistema:**
        - **Banco de Dados:** SQLite
        - **Arquivo:** `livro_caixa.db`
        - **Dados:** Persistidos localmente
        - **Exporta√ß√£o:** CSV compat√≠vel com Excel
        - **Vers√£o:** 2.0 Final
        """)

# Rodap√© atualizado
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666; font-size: 0.9rem;'>
        <strong>CONSTITUCIONALISTAS-929</strong> - Livro Caixa | 
        Desenvolvido por Silmar Tolotto em Python | 
        √öltima atualiza√ß√£o: {date}
    </div>
    """.format(date=datetime.now().strftime('%d/%m/%Y %H:%M')),
    unsafe_allow_html=True
)
